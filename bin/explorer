#!/usr/bin/env node
var p = require('path')
var fs = require('fs')
var Spawner = require('promise-spawner')
var eol = require('os').EOL
var yamljs = require('yamljs')
var utils = require('../lib/utils.js')
var getConfiguration = require('../lib/config.js').getConfiguration

var argv = require('minimist')(process.argv.slice(2))
var command = argv._.shift()

try {
  var config_path = utils.firstExistingPath([
    argv.c,
    p.join(process.env.HOME || '', './.config/explorer/config.yml'), 
    p.join(__dirname, './config.yml')
  ])

  var config = getConfiguration(config_path)
} catch(e) {
  console.log('No config file!')
  throw e
}

var spawner = new Spawner()

function exit() {
  console.log.apply(console, arguments)
  return function(code) {
    if(code instanceof Error) console.error(err.stack)
    if(typeof code == 'undefined') code = 0
    return process.exit(code)
  }
}

function help() {
  return fs.createReadStream(p.join(__dirname, 'help')).pipe(process.stdout)
}

function pluginCommand(args) {
  var command = args._.shift()

  if(args._.length == 0) {
    for(var i in config.plugins) {
      if(config.plugins[i].module !== undefined)
        args._.push(config.plugins[i].module)
    }
  }

  if(args._.length == 0) {
    exit("No plugins to install")(1)
  }

  var cwd = p.resolve(__dirname, '..')
  var command = ['npm', command, '--prefix='+cwd].concat(args._).join(' ')

  console.log('Executing %s', command)

  //@todo improve through stream + log
  spawner.out.pipe(process.stdout)
  spawner.err.pipe(process.stderr)

  spawner.sp(command, {cwd: cwd})
  .then(exit("Plugin installed, don't forget to add it to the config"))
  .catch(exit('Command %s failed with code %d', command, code))
}

function reload() {

  spawner.sp('pm2 jlist')
  .then(function() {
    
    var d = JSON.parse(this.data.out)
      .filter(function(e) {
        return e.name == 'xplorer'
      })

    if(d.length == 0) {
      return exit("Could not find 'xplorer' in pm2, explorer might not be running or was not installed with 'pm2 install xplorer'")(1)
    }

    return spawner.sp('pm2 restart xplorer')
    .then(exit('Explorer has restarted'))
  })
  .catch(exit('Command pm2 failed'))
}

switch (command) {
  case 'plugin':
    return pluginCommand(argv)
    break;
  case 'reload':
    return reload()
  default:
    return help()
}
